<?php

namespace AppBundle\Controller\Author;

use AppBundle\Entity\Helper;
use AppBundle\Entity\Lesson;
use AppBundle\Form\LessonFormType;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\BrowserKit\Response;
use Symfony\Component\HttpFoundation\Request;

class AuthorLessonController extends Controller
{
    /**
     * List all of the lessons by title.
     *
     * @Route("/author/lesson", name="lesson_list")
     * @Security("has_role('ROLE_ADMIN', 'ROLE_AUTHOR')")
     */
    public function listLessonAction()
    {
        $lessons = $this->getDoctrine()
            ->getRepository('AppBundle:Lesson')
            ->findAll();

        return $this->render('author/lesson/list.html.twig', [
            'lessons' => $lessons,
        ]);
    }

    /**
     * @Route("/author/lesson/new", name="lesson_new")
     * @Security("has_role('ROLE_ADMIN', 'ROLE_AUTHOR')")
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function newLessonAction(Request $request)
    {
        //Create a new object to get its default field values.
        $lesson = new Lesson();
        //Pass new object to the form.
        $form = $this->createForm(LessonFormType::class, $lesson);

        // only handles data on POST
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @var \AppBundle\Entity\Lesson $lesson
             */
            $lesson = $form->getData();
            $lesson->setWhenCreated(new \DateTime());#Todo: use real date/time
            $lesson->setWhenUpdated(new \DateTime());#Todo: use real date/time
            $lesson->setParent(0);
            $em = $this->getDoctrine()->getManager();
            $em->persist($lesson);
            $em->flush();

            $this->addFlash('success', 'Lesson created!');

            return $this->redirectToRoute('lesson_list');
        }

        return $this->render('author/lesson/new.html.twig', [
            'lessonForm' => $form->createView(),
            'operation' => 'new',
        ]);
    }

    /**
     * @Route("/author/lesson/{id}/edit", name="lesson_edit")
     * @Security("has_role('ROLE_ADMIN', 'ROLE_AUTHOR')")
     * @param Request $request
     * @param Lesson $lesson
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function editLessonAction(Request $request, Lesson $lesson)
    {
        $form = $this->createForm(LessonFormType::class, $lesson);

        // only handles data on POST
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            /** @var \AppBundle\Entity\Lesson $lesson */
            $lesson = $form->getData();

//            $x = $form->get('isAvailable');
//            $v = $x->getViewData();

//            $lesson->setIsAvailable( ! is_null( $form->get('isAvailable')->getViewData() ) );
//            $lesson->setTitle('DOGS');

//            $lesson->setIsAvailable( false );

            $lesson->setWhenUpdated(new \DateTime()); #Todo: use real date/time.


            $em = $this->getDoctrine()->getManager();
            $em->persist($lesson);
            $em->flush();

            $this->addFlash('success', 'Lesson updated!');

            return $this->redirectToRoute('lesson_list');
        }

        return $this->render('author/lesson/edit.html.twig', [
            'lessonForm' => $form->createView(),
            'operation' => 'edit',
            'lesson_id' => $lesson->getId(),
        ]);
    }

    /**
     * Delete a lesson.
     *
     * @Route("/author/lesson/{id}/delete", name="lesson_delete")
     * @Security("has_role('ROLE_ADMIN', 'ROLE_AUTHOR')")
     */
    public function deleteLessonAction($id)
    {
        //Does the same thing as the annotation.
//        $this->denyAccessUnlessGranted('ROLE_ADMIN');

        return new Response('Not here.');
    }
}
